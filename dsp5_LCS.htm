<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html><head>









   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="John coffey">
   <meta name="GENERATOR" content="Mozilla/4.61 [en] (WinNT; U) [Netscape]"><title>Longest Common Subsequence Program</title>
   
	<style>
<!--
div.Section1




	{page:Section1;}




-->
</style></head><body>

<center>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b><font size="4">The University of 
West Florida <br>
Department of Computer Science</font></b></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b><font size="4">Data Structures and 
Algorithms II</font></b></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b><font size="4">John W. Coffey</font></b></p>
</center>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b>Background</b></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<div v:shape="_x0000_s1026" style="">
	<div class="O" style="">
		As discussed in class, the<span style=""> 
		longest common subsequence (LCS) problem is a common problem that arises 
		(e.g.) in computational biology. </span>
		<span style="">Given two sequences of numbers, letters, genes, 
		etc., </span>
		<span style="font-family: &quot;Courier New&quot;;">
		x[1..m]</span><span style=""> 
		and </span>
		<span style="font-family: &quot;Courier New&quot;;">
		y[1..n],</span><span style=""> 
		find a longest subsequence that is common to both of them. </span>
		<span style="">Usually no single, unique answer, but rather several 
		possible answers exist. As we know, the brute force algorithm is O(n*2</span><sup><span style="font-size: 12pt; position: relative; top: -0.45em;">m</span></sup><span style="">) 
		whereas the dynamic programming version is O(m*n). However, as we also 
		know, the basic dynamic programming solution requires O(2*n*m) space.
		</span></div>
	<div class="O" style="">
&nbsp;</div>
</div>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b>Program Descriptions</b></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">Assume that we are
implementing a program to help us study similarity among organisms
based upon comparison of gene sequences. In order to do this, we will
implement the dynamic programming version of the LCS algorithm in two
different ways <span style="font-style: italic;">in one program.</span> </p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b>Part 1:</b></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">The first part will
read a file containing a pair of character strings corresponding to the
gene sequences, compute the LCS and display the original strings and
the longest subsequence of characters. This version of the problem will
utilize the entire "c" array, but NO "b" array. You must reconstruct
the sequence itself from the "c" array for full credit. Strings could
be up to 1000 characters in length.The file name you should use is <span style="font-family: monospace;">twoStrings.txt. </span>Obviously,
you will not be able to hand-check for LCS in strings of such length,
so you should run tests with shorter strings to confirm correctness of
your program.<br>
</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b>Part 2:</b></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">The second part will not make 
any attempt to recount the actual subsequence. It will calculate measures of similarity 
(which I made up) among an arbitrary number of character strings in a file. This 
second program will utilize an approach of 
keeping only the <font face="Courier">2xM</font><font face="Times New Roman"> 
entries needed to compute the LCS value.</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">It will produce as output, a table 
that will look like this:</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">&nbsp;&nbsp; 01 02 03 04 05 06 07</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">01&nbsp; -&nbsp; 
H&nbsp; M&nbsp; D&nbsp; M&nbsp; L&nbsp; D</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">02&nbsp; -&nbsp; 
-&nbsp; H&nbsp; H&nbsp; D&nbsp; D&nbsp; H</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">03&nbsp; -&nbsp; 
-&nbsp; -&nbsp; L&nbsp; M&nbsp; D&nbsp; M</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">04&nbsp; -&nbsp; 
-&nbsp; -&nbsp; -&nbsp; M&nbsp; L&nbsp; M</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">05&nbsp; -&nbsp; 
-&nbsp; -&nbsp; -&nbsp; -&nbsp; M&nbsp; L</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">06&nbsp; -&nbsp; 
-&nbsp; -&nbsp; -&nbsp; -&nbsp; -&nbsp; M</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">07&nbsp; -&nbsp; 
-&nbsp; -&nbsp; -&nbsp; -&nbsp; -&nbsp; -</font></p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">Obviously, the 01, 02, 03, ... are 
labels for the strings, and the upper triangle holds a measure of similarity 
between pairs of strings {01,02}, {01,03}, {01,04}...</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">The possible entries in the 
table are:</p>
<blockquote>
	<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">H = high 
	similarity between the strings</font></p>
	<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">M = medium 
	similarity between the strings</font></p>
	<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">L = low 
	similarity between the strings</font></p>
	<p style="margin-top: 0pt; margin-bottom: 0pt;"><font face="Courier">D = the two 
	strings are dissimilar</font></p>
</blockquote>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b>Determining similarity:</b></p>
<ul>
	<li>
	<p style="margin-top: 0pt; margin-bottom: 0pt;">High similarity exists if the 
	length of the shorter string is within 10% of the length of the longer string 
	and the longest common subsequence is at least 90% of the length of the shorter 
	string.</p></li>
	<li>
	<p style="margin-top: 0pt; margin-bottom: 0pt;">Medium similarity exists if the 
	criteria for High similarity is not met but the length of the shorter string 
	is within 20% of the longer string and the longest common subsequence is 80% 
	of the length of the shorter string.</p></li>
	<li>
	<p style="margin-top: 0pt; margin-bottom: 0pt;">Low similarity exists if the 
	criteria for Medium similarity is not met but the length of the shorter 
	string is within 40% of the longer string and the longest common subsequence 
	is 50% of the length of the shorter string.</p></li>
	<li>
	<p style="margin-top: 0pt; margin-bottom: 0pt;">Dissimilar strings are any that 
	meet none of the above criteria.</p></li>
</ul>
<p style="margin-top: 0pt; margin-bottom: 0pt;">The file of strings
will first contain an integer that indicates how many strings are in
the file, followed by that number of character strings. Strings will be
terminated in the file by newlines. Recognize that you can end up with
memory problems in a real-world version of this problem and you should
not try to read all the strings into RAM at once. This is an obvious
place to use a direct access file. We are already economizing on the
amount of ram by not using the O(2*m*n) space. The reason for this is
that these will be long strings and in a real-world solution, there
might be a lot of them. For our purposes, you can assume there will be
20 strings or fewer. The file name you should use is <span style="font-family: monospace;">multiStrings.txt</span>
</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;"><b>Deliverables</b> </p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">You will submit the following for 
this project: <br>
</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">1. A User's manual for your program
<br>
2. Your source code in C++. <br>
</p>
<p style="margin-top: 0pt; margin-bottom: 0pt;">3. Your versions of <span style="font-family: monospace;">twoStrings.txt</span> and <span style="font-family: monospace;">multiStrings.txt.</span>
</p>

<p style="margin-top: 0pt; margin-bottom: 0pt;">4. a Makefile</p>
<div class="Section1">
	<p class="MsoNormal" style="margin-top: 0pt; margin-bottom: 0pt;">&nbsp;</p>
	<p class="MsoNormal" style="margin-top: 0pt; margin-bottom: 0pt;"><b>Submission:&nbsp;
	</b><span style="font-weight: 700;"><br>
</span></p>
<p style="color: rgb(0, 0, 0); font-family: &quot;Times New Roman&quot;; font-size: medium; font-style: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;">1. Compile and run your program one last time before submitting it. Your program must run with gcc in the Linux lab.<br>2.
Place every file in your submission in a SINGLE DIRECTORY named
&lt;last name&gt;&lt;first initial&gt;. For instance,
I would create directory:&nbsp; coffeyj.<br>3.
zip that FOLDER into a .zip file with the SAME NAME. This means that
inside your zip file, you will have exactly one folder (from the
example: coffeyj) showing at the top level. Inside that folder will
be ALL the files in your project.<br>4.&nbsp;<em>DO NOT</em>&nbsp;make
separate folders for documentation and source files (or anything else)
inside the main folder. Having such a setup simply necessitates more
navigation time to get where we need to go to grade.<br>5. Any needed input files should be in the top-level folder along with the source code.<br>6.
MacOS users - remove the _MacOS_ utility folder before you zip up the
file. If you cannot, delete it from the archive once the archive is
created. It just takes up space and is not needed for anything we do
with your submissions.<br>7. Login to Canvas<a href="http://elearning.uwf.edu/">.</a>&nbsp;Select our course.<br>9. Go to Assignments and select the appropriate project. Click the Submit button.<br>10.
Upload your zip file. Check to insure that the file was uploaded.
ALWAYS give yourself enough time. If you are trying to submit at
11:57pm on your machine, the clock might be off and the dropbox might
already be closed.</p>
<p style="color: rgb(0, 0, 0); font-family: &quot;Times New Roman&quot;; font-size: medium; font-style: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;">Please review the policy on ACADEMIC MISCONDUCT. This is an&nbsp;<em>individual assignment.</em></p>
</div>
</body></html>